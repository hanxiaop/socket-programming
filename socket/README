Full Name: Xiaopeng Han
Student ID: 8713320047

In this assignment, an end-to-end delay computation was implemented. For the server side, two names named server A and server B, are connected to database A and database B respectively. Database all have five parameters, including link id, bandwidth, length, velocity and noise power. Then server C is set up to do the delay calculation. The most important server is the AWS server, which pass the client request to the server A and server B, and if there are link id that matches the link id in the database, the AWS server will analyze the result, and send to server C to do the computation. For the client side, there is only one client which sends request by inputing link id, file size and signal power. A monitor is also set up to display the input from user, and also the final delay results. serverA.cpp and serverB.cpp are two servers that connected to the database, analyze if there are link ids that match the client's request. They store the results in vector format and do the serach upon having requests. Two UDP sockest are implemented to connect serverA and serverB to the AWS server. serverC.cpp does all the calculations once having exact matches. It analyzes inputs which are link id, file size, signal power, link length, bandwidth, velocity and noise power, and then generate the transmission delay, propogation delay and end-to-end delay, and then using a UDP socket to send it back to AWS server. AWS.cpp does a lot of functionality. Firstly, it analyzes the client's input, splitting it into three parts, and sending only link ID to the server A and server B. Then, it will decide if there exist matches or not, if matches exist, it will analyze all the data and combine them into a string, and send to the server C. If there is no match existing, it will not send anything to server C, insteadlly, it will send no match back to the monitor and the client. Once getting results from server C, the AWS server will combine all the information into a string and send the delay to client, and detailed delay information to the monitor. The client.cpp is used only to send the information to AWS server, and get the results of no match or having delay. The monitor is used only to receive information from AWS server, and it is always connected to the AWS server during the lifecycle. Both client and monitor use TCP to do the transpotation. In the project, all the messages are transmitted using TCP or UDP by doing sending and receiving. The string or character array in the buffer is the adequate medium to do the transmission in the sockets. The project is completed by myself, and only a few codes are used from the Internet which are functionalities about sockets, like socket creation, socket binding, socket connecting, socket sending and receiving. However, they are all concept that are all very similar on the Internet. I didn't copy the code. Instead, i learnt some concept from the Internet and rewrite the code in my style.
